{
  "version": 1,
  "nodes": [
    {
      "id": 1,
      "name": "Canvas",
      "type": "graphics.canvas",
      "x": 50,
      "y": 50
    },
    {
      "id": 2,
      "name": "Background Color",
      "type": "graphics.backgroundColor",
      "x": 50,
      "y": 100,
      "values": {
        "enable": false
      }
    },
    {
      "id": 3,
      "name": "Sequence",
      "type": "core.sequence",
      "x": 50,
      "y": 150
    },
    {
      "id": 10,
      "name": "Webcam Image",
      "type": "image.camImage",
      "x": 289,
      "y": 67
    },
    {
      "id": 11,
      "name": "Pixels",
      "type": "image.pixels",
      "x": 131,
      "y": 251
    },
    {
      "id": 12,
      "name": "Draw Pixels",
      "type": "project.drawPixels",
      "x": 87,
      "y": 353,
      "values": {
        "bccolor": [
          5,
          5,
          163,
          1
        ],
        "segment": 9
      }
    }
  ],
  "connections": [
    {
      "outNode": 1,
      "outPort": "out",
      "inNode": 2,
      "inPort": "in"
    },
    {
      "outNode": 2,
      "outPort": "out",
      "inNode": 3,
      "inPort": "in"
    },
    {
      "outNode": 10,
      "outPort": "image",
      "inNode": 11,
      "inPort": "image"
    },
    {
      "outNode": 11,
      "outPort": "pixels",
      "inNode": 12,
      "inPort": "pixels"
    },
    {
      "outNode": 3,
      "outPort": "out1",
      "inNode": 11,
      "inPort": "in"
    },
    {
      "outNode": 3,
      "outPort": "out2",
      "inNode": 12,
      "inPort": "in"
    }
  ],
  "types": [
    {
      "name": "Pixels",
      "type": "project.pixels",
      "source": "// Empty custom node.\nconst triggerIn = node.triggerIn('in');\nconst imageIn = node.imageIn('image');\nconst segmentIn = node.numberIn('segment', 10);\n\nfunction inRects(im, props){\n  const { canvas, ctx } = props;\n    var seg = segmentIn.value;\n    for(var i = 0; i < canvas.width; i+=seg ){\n        for(var j = 0;j < canvas.height;j+=seg ){\n            var num = (j * canvas.width + i);\n            var pi = im.data[num * 4] / 10;\n            ctx.strokeRect(i - pi / 2, j - pi / 2, pi, pi);\n        }\n    }\n}\n\ntriggerIn.onTrigger = (props) => {\n  const { canvas, ctx } = props;\n  if (imageIn.value) {\n    ctx.drawImage(imageIn.value, 0, 0, canvas.width, canvas.height);\n    var imagePixels = ctx.getImageData(0,0,canvas.width,canvas.height);\n    ctx.fillStyle = '#223344';\n\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\tinRects(imagePixels,props);\n  }  \n}",
      "description": "Empty custom node."
    },
    {
      "name": "Draw Pixels",
      "type": "project.drawPixels",
      "source": "// Empty custom node.\nconst triggerIn = node.triggerIn('in');\nconst backgroundColorIn = node.colorIn('bccolor', [20, 20, 30, 1]);\nconst colorIn = node.colorIn('color', [250, 120, 0, 1]);\nconst segmentIn = node.numberIn('segment', 10);\nconst pixelsIn = node.objectIn('pixels');\n\nfunction inRects(im, props){\n  const { canvas, ctx } = props;\n    var seg = segmentIn.value;\n  \tctx.strokeStyle = g.rgba(...colorIn.value);\n    for(var i = 0; i < canvas.width; i+=seg ){\n        for(var j = 0;j < canvas.height;j+=seg ){\n            var num = (j * canvas.width + i);\n            var pi = im.data[num * 4] / 10;\n            ctx.strokeRect(i - pi / 2, j - pi / 2, pi, pi);\n        }\n    }\n}\n\ntriggerIn.onTrigger = (props) => {\n  const { canvas, ctx } = props;\n  ctx.fillStyle = g.rgba(...backgroundColorIn.value);\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  if (pixelsIn.value) {\n\tinRects(pixelsIn.value,props);\n  }  \n}",
      "description": "Empty custom node."
    }
  ]
}