{
  "version": 1,
  "nodes": [
    {
      "id": 1,
      "name": "Canvas",
      "type": "graphics.canvas",
      "x": 50,
      "y": 50
    },
    {
      "id": 2,
      "name": "Background Color",
      "type": "graphics.backgroundColor",
      "x": 50,
      "y": 100
    },
    {
      "id": 9,
      "name": "Custom",
      "type": "project.custom",
      "x": 50,
      "y": 168,
      "values": {
        "width": 300,
        "height": 300
      }
    }
  ],
  "connections": [
    {
      "outNode": 1,
      "outPort": "out",
      "inNode": 2,
      "inPort": "in"
    },
    {
      "outNode": 2,
      "outPort": "out",
      "inNode": 9,
      "inPort": "in"
    }
  ],
  "types": [
    {
      "name": "Custom",
      "type": "project.custom",
      "source": "// webcam node\nconst triggerIn = node.triggerIn('in');\nconst xIn = node.numberIn('x', 100);\nconst yIn = node.numberIn('y', 100);\nconst wIn = node.numberIn('width', 160);\nconst hIn = node.numberIn('height', 120);\nlet video;\nlet streaming;\n\nnode.onStart = () => {\n    video = document.createElement('video');\n    video.autoplay = true;\n  \n if (navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({\n          video: true\n        })\n        .then(function(stream) {\n          video.srcObject = stream;\n        streaming = stream;\n        })\n        .catch(function(err0r) {\n          console.log(\"no camera input!\");\n        });\n    }\n};\n\nnode.onStop = () => {\n  if (streaming.active) {\n    streaming.getTracks().forEach(track => track.stop())\n    video = null;\n  }\n}\n\ntriggerIn.onTrigger = (props) => {\n  const { canvas, ctx } = props;\n  if(video) {\n  \tctx.drawImage(video, xIn.value, yIn.value, wIn.value, hIn.value);\n  }\n};",
      "description": "webcam node"
    }
  ]
}